from torch.utils.data import Dataset
from os import listdir
from os.path import isfile, join
import csv


class CNCTask3aDataset(Dataset):
    """
    This class defines subclass of the torch Dataset class for data provided
    for Task 3a of CASE-2022, the causal news corpus.
    """

    def __init__(self, data_set, indices=None):
        """
        Notes:

        Args:
            data_set: A list of lists where each inner list represents a sample
            indices: A set of indices to be used to select samples from the dataset
        """
        if indices is None:
            self.raw_data = data_set
        else:
            self.raw_data = []
            for i in indices:
                self.raw_data.append(data_set[i])

    def __len__(self):
        return len(self.raw_data)

    def __getitem__(self, idx):
        return {'id': self.raw_data[idx][0], 'text': self.raw_data[idx][1], 'label': int(self.raw_data[idx][2])}


def load_data(dir_path):
    """
    This laod_cnc_data method is intended to be used on CSV files generated by preprocessing.
    The preprocessing is described in Section 2.1 under data in Lab Notes.
    In the case of training data, preprocessing generates multiple CSV files.
    """
    all_train = []
    csv_paths = [join(dir_path, f) for f in listdir(dir_path) if isfile(join(dir_path, f))]
    for path in csv_paths:
        print(path)
        with open(path) as f:
            csvreader = csv.reader(f)
            header = next(csvreader)
            for row in csvreader:
                all_train.append(row)
    return all_train



